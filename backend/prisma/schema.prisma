// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  LOCAL
  GOOGLE
  FACEBOOK
  GITHUB
  TWITTER
}

enum Roles {
  ADMIN
  CUSTOMER
}

model user {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String

  email    String? @unique
  password String?

  picture String?

  provider   Provider @default(LOCAL)
  providerId String?

  roles Roles @default(CUSTOMER)

  recipes recipe[]
  favorites userFavoriteRecipe[]
  comments comments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model category {
  id      Int     @id @default(autoincrement())
  name    String
  slug    String  @unique
  picture String?

  recipes recipe[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ingredient {
  id        Int       @id @default(autoincrement())
  name      String
  unit      String
  picture   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  recipes recipeIngredients[]
}

model recipe {
  id       Int      @id @default(autoincrement())
  name     String
  slug     String   @unique
  pictures String[]

  preparationTime Int
  cookingTime     Int
  growingTime     Int
  portions        Int                 @default(4)
  difficulty      Int                 @default(1)
  ingredients     recipeIngredients[]
  steps           recipeStep[]

  authorId Int
  author   user @relation(fields: [authorId], references: [id])
  userFavs userFavoriteRecipe[]

  categories category[]

  comments comments[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model recipeIngredients {
  id           Int     @id @default(autoincrement())
  recipeId     Int
  ingredientId Int
  quantity     Int
  overrideUnit String?

  recipe     recipe     @relation(fields: [recipeId], references: [id])
  ingredient ingredient @relation(fields: [ingredientId], references: [id])
}

model recipeStep {
  id Int @id @default(autoincrement())

  recipeId    Int
  step        Int
  description String
  time        Int

  recipe recipe @relation(fields: [recipeId], references: [id])
}

model userFavoriteRecipe {
  id       Int    @id @default(autoincrement())
  userId   Int
  recipeId Int

  user   user   @relation(fields: [userId], references: [id])
  recipe recipe @relation(fields: [recipeId], references: [id])
}

model comments {
  id       Int     @id @default(autoincrement())
  userId   Int
  recipeId Int
  comment  String
  rating  Int

  recipe recipe @relation(fields: [recipeId], references: [id])
  user   user   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
}